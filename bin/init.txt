# Liberation Circuit init.txt
#
# To change the game's settings, edit this file using an
#  ordinary text editor.
#
# Options are:
#
#  display_w (value)
#      Sets display width. Valid values are 1024 to 1920
#  display h (value)
#      Sets height. Valid values are 768 to 1200
#
#  vol_music
#      Sets music volume. Valid values are 0 to 100
#  vol_effect (value)
#      Sets effects volume. Valid values are 0 to 100 
#
#  fullscreen
#      Uses a fullscreen window at your current display resolution.
#      (display_w/h values are ignored). This mode is recommended 
#      unless you have a good reason not to use it.
#      If you are using multiple monitors, it may be useful to set 
#      capture_mouse as well (see below).
#
#  large_fonts
#      Uses 1.5x-sized fonts.
#
#  double_fonts
#      Uses double-sized fonts.
#      For screens with very high resolution only! (with anything less
#      than about 1920x1080 parts of the interface will be hard to use)
#
# Example:
#
# display_w 1600
# display_h 900
# vol_music 50
# vol_effect 80
# fullscreen
# large_fonts

# display_w 1600
# display_h 900
fullscreen
vol_music 60
vol_effect 80



# Some more special options are:
#
#  true_fullscreen
#      Uses true fullscreen. May cause problems when a file
#      dialogue (load/save) is opened. Unlike fullscreen,
#      the display_w and h values should be set (to a resolution
#      that your monitor supports).
#      If you are using multiple monitors, it may be useful to set 
#      capture_mouse as well (see below).
#
#  msaa_off
#      Turns off multisampled anti-aliasing. Improves performance
#      at a terrible cost in jaggedness.
#
#  background_detail (value)
#      Reduces the background detail to improve performance.
#            values are:
#             0 turns off the background completely (other than data wells). This
#               is fast, but doesn't look so great.
#             1 reduces detail a bit.
#
#  capture_mouse
#      For playing in fullscreen/true_fullscreen with a multi-monitor setup.
#      tries to capture the mouse in the game window during gameplay.
#      May not work in Mac OSX.
#
#  savefile
#      By default, the game saves mission progress in the msn.dat file in the
#      same directory as the executable.
#      If you want the game to save this file somewhere else, you can use the
#      savefile option to specify a diffent path and filename.
#            example:
#            savefile mission.dat
#            savefile ../mission.dat
#            savefile c:/games/savefiles/libcirc/msn.dat
#      The path and filename can't have any spaces.
#      The path is optional (e.g. the first example just saves to mission.dat in
#      the execution directory) but there must be a file name.
#



#  template
#      Tells the game to automatically load a file into a template on start-up.
#            example:
#
#             template 0 src/cm_base.c
#
#            The number indicates which player the file will belong to.
#             (player 0 is the player in story mode)
#            The path is a relative path (from this directory) indicating
#             the file's location.
#            Templates are filled one by one, starting from template 0.
#
#
template 0 proc/cm_base.c
template 0 proc/cm_mbuild.c
template 0 proc/cm_harvest.c
template 0 proc/cm_attack.c
template 0 proc/cm_destroy.c
template 0 proc/cm_command.c
template 0 proc/cm_tri_base.c


# Colour replacement
#  - replaces a player's usual colour with another colour.
#  - for players who find it difficult to distinguish certain colours.
#  - works in story mode and custom game mode
#
#    example:
#
#     replace_col 0 2
#     replace_col 1 3
#
#    - sets player 0's colour to colour 2 (green)
#    - sets player 1's colour to colour 3 (white)
#    - if you're playing story mode (the single-player game)
#      this will use green for the player
#      and white for the enemies.
#
#  colours are:
#  0 - blue
#  1 - yellow
#  2 - green
#  3 - white
#  4 - purple
#  5 - orange
#  6 - red

# Keyboard remapping
#  - you should be able to ignore this part if you're using
#    a standard QWERTY keyboard
#  - but this may help if the game isn't registering cursor keys etc
#  - Github user rHermes reports that unicode input does not work correctly
#    for some keys on a Norwegian keyboard - the [] and () keys - and has
#    written an AutoHotkey script to fix this (tested on Windows so far).
#    See fix-altgr.ahk in the /bin/misc directory.
#
#
# To remap a key, use a line like this:
# keymap 2 47
# This maps key code 47 to function 2 (tab).
# The key code is the code generated by your keyboard when you press a key.
# To find out the key codes generated by your keyboard, press k at the game's
#  start menu screen (the one with the copyright message etc).
# The following functions can be remapped:
# 0 backspace
# 1 delete
# 2 tab
# 3 enter
# 4 home
# 5 end
# 6 page up
# 7 page down
# 8 cursor left
# 9 cursor right
# 10 cursor up
# 11 cursor down
# 12 insert
# 13 shift
# 14 control
# 15 F1
# 16 F2
# 17 F3
# 18 F4
# 19 F5
# 20 F6
# 21 F7
# 22 F8
# 23 F9
# 24 F10

#  Remapping the following number keys only affects keyboard shortcuts for building
#   (which by default use the number keys on a QWERTY keyboard)
#  It doesn't affect the way number keys work in text input.
# 25 build template 0
# 26 build template 1
# 27 build template 2
# 28 build template 3
# 29 build template 4
# 30 build template 5
# 31 build template 6
# 32 build template 7
# 33 build template 8
# 34 build template 9

#  the following keys are for control groups (0-6)
#  by default they are mapped to ZXCVBNM 
#   (the lowest row of keys on a QWERTY keyboard)
#  as with numbers, remapping them has no effect on text input.
# 35 control group 0
# 36 control group 1
# 37 control group 2
# 38 control group 3
# 39 control group 4
# 40 control group 5
# 41 control group 6



# Currently, a remapped function can only have a single key mapped to it (which prevents
#  the use of both shift keys, for example). This may be fixed in future.




# last line (leave this here)