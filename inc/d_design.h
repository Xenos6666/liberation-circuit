

#ifndef H_D_DESIGN
#define H_D_DESIGN

void init_templ_group_member(struct template_struct* templ, int gm);
void init_template_for_design(struct template_struct* templ);
void open_template_in_designer(struct template_struct* tpl);

void design_window_input(int mouse_x, int mouse_y);
void design_panel_button(int button_element);
int	mouse_drag_design_member(int mouse_x, int mouse_y, int ctrl_pressed);
int	mouse_drag_design_object(int mouse_x, int mouse_y, int ctrl_pressed);

struct design_sub_button_struct
{
	int type;
	int value;
//	int unlock_index;
	char *name;// [DSB_NAME_LENGTH];
};


enum
{
// design sub-buttons
DSB_SHAPE_CORE_STATIC_QUAD,
#define DSB_CORE_SHAPE_FIRST DSB_SHAPE_CORE_STATIC_QUAD
DSB_SHAPE_CORE_STATIC_PENT,
DSB_SHAPE_CORE_STATIC_HEX_A,
DSB_SHAPE_CORE_STATIC_HEX_B,
DSB_SHAPE_CORE_STATIC_HEX_C,
DSB_SHAPE_CORE_QUAD_A,
DSB_SHAPE_CORE_QUAD_B,
DSB_SHAPE_CORE_PENT_A,
DSB_SHAPE_CORE_PENT_B,
DSB_SHAPE_CORE_PENT_C,
DSB_SHAPE_CORE_HEX_A,
DSB_SHAPE_CORE_HEX_B,
DSB_SHAPE_CORE_HEX_C,
#define DSB_CORE_SHAPE_LAST DSB_SHAPE_CORE_HEX_C

DSB_SHAPE_COMPONENT_TRI,
#define DSB_SHAPE_FIRST DSB_SHAPE_COMPONENT_TRI
DSB_SHAPE_COMPONENT_FORK,
DSB_SHAPE_COMPONENT_BOX,
DSB_SHAPE_COMPONENT_LONG4,
DSB_SHAPE_COMPONENT_CAP,
DSB_SHAPE_COMPONENT_PRONG,
DSB_SHAPE_COMPONENT_LONG5,
DSB_SHAPE_COMPONENT_PEAK,
DSB_SHAPE_COMPONENT_SNUB,
DSB_SHAPE_COMPONENT_BOWL,
DSB_SHAPE_COMPONENT_LONG6,
DSB_SHAPE_COMPONENT_DROP,
DSB_SHAPE_COMPONENT_SIDE,
#define DSB_SHAPE_LAST DSB_SHAPE_COMPONENT_SIDE




/*
DSB_SHAPE5_PENTAGON,
#define DSB_SHAPE5_FIRST DSB_SHAPE5_PENTAGON
DSB_SHAPE5_POINTY,
DSB_SHAPE5_LONG,
DSB_SHAPE5_WIDE,
#define DSB_SHAPE5_LAST DSB_SHAPE5_WIDE

DSB_SHAPE6_HEXAGON,
#define DSB_SHAPE6_FIRST DSB_SHAPE6_HEXAGON
DSB_SHAPE6_POINTY,
DSB_SHAPE6_LONG,
DSB_SHAPE6_IRREG_L,
DSB_SHAPE6_IRREG_R,
DSB_SHAPE6_ARROW,
DSB_SHAPE6_STAR,
#define DSB_SHAPE6_LAST DSB_SHAPE6_STAR
*/
DSB_OBJECT_LINK_LINK,
#define DSB_OBJECT_LINK_FIRST DSB_OBJECT_LINK_LINK
DSB_OBJECT_LINK_LINK2,
#define DSB_OBJECT_LINK_LAST DSB_OBJECT_LINK_LINK2

DSB_OBJECT_MOVE_MOVE,
#define DSB_OBJECT_MOVE_FIRST DSB_OBJECT_MOVE_MOVE
#define DSB_OBJECT_MOVE_LAST DSB_OBJECT_MOVE_MOVE

DSB_OBJECT_ATTACK_PULSE,
#define DSB_OBJECT_ATTACK_FIRST DSB_OBJECT_ATTACK_PULSE
DSB_OBJECT_ATTACK_PULSE_L,
DSB_OBJECT_ATTACK_PULSE_XL,
DSB_OBJECT_ATTACK_BURST,
DSB_OBJECT_ATTACK_BURST_L,
DSB_OBJECT_ATTACK_BURST_XL,
DSB_OBJECT_ATTACK_STREAM,
DSB_OBJECT_ATTACK_STREAM_DIR,
DSB_OBJECT_ATTACK_SPIKE,
DSB_OBJECT_ATTACK_ULTRA,
DSB_OBJECT_ATTACK_ULTRA_DIR,
DSB_OBJECT_ATTACK_SLICE,
//DSB_OBJECT_ATTACK_SLICE_DIR,
#define DSB_OBJECT_ATTACK_LAST DSB_OBJECT_ATTACK_SLICE

DSB_OBJECT_STD_BUILD,
#define DSB_OBJECT_STD_FIRST DSB_OBJECT_STD_BUILD
DSB_OBJECT_STD_HARVEST,
DSB_OBJECT_STD_STORAGE,
DSB_OBJECT_STD_ALLOCATE,
#define DSB_OBJECT_STD_LAST DSB_OBJECT_STD_ALLOCATE

DSB_OBJECT_DEFEND_INTERFACE,
#define DSB_OBJECT_DEFEND_FIRST DSB_OBJECT_DEFEND_INTERFACE
//DSB_OBJECT_DEFEND_INTERFACE_DEPTH,
//DSB_OBJECT_DEFEND_INTERFACE_STABILITY,
//DSB_OBJECT_DEFEND_INTERFACE_RESPONSE,
DSB_OBJECT_DEFEND_REPAIR,
DSB_OBJECT_DEFEND_REPAIR_OTHER,
DSB_OBJECT_DEFEND_STABILITY,
#define DSB_OBJECT_DEFEND_LAST DSB_OBJECT_DEFEND_STABILITY

DSB_AUTOCODE_NONE,
#define DSB_AUTOCODE_FIRST DSB_AUTOCODE_NONE
DSB_AUTOCODE_STANDARD,
DSB_AUTOCODE_CHARGE,
DSB_AUTOCODE_BOMBARD,
DSB_AUTOCODE_CIRCLE_CW,
DSB_AUTOCODE_CIRCLE_ACW,
DSB_AUTOCODE_ERRATIC,
DSB_AUTOCODE_CAUTIOUS,
#define DSB_AUTOCODE_LAST DSB_AUTOCODE_CAUTIOUS

DSB_ACTION_DELETE,

DSB_STRUCT_SIZE
};

enum
{
AUTOCODE_AVAILABLE_YES,

AUTOCODE_AVAILABLE_MAYBE_SPIKE, // only front attack is spike, but autocode type is not BOMBARD
AUTOCODE_AVAILABLE_MAYBE_NO_FWD_ATT, // no forward attack
AUTOCODE_AVAILABLE_MAYBE_NO_FWD_OR_R_ATT, // no forward or right attack
AUTOCODE_AVAILABLE_MAYBE_NO_FWD_OR_L_ATT, // no forward or left attack
//AUTOCODE_AVAILABLE_MAYBE_UNUSABLE_MAIN, // has main attack, but this autocode type can't use main attack
AUTOCODE_AVAILABLE_MAYBE_POOR_MAIN, // has main attack, but this autocode type uses main attack poorly
AUTOCODE_AVAILABLE_MAYBE_NO_SPIKE, // no spike
AUTOCODE_AVAILABLE_MAYBE_NO_MOVE, // not static, but can't move

#define FIRST_UNAVAILABLE_AUTOCODE_RESULT AUTOCODE_AVAILABLE_NO_STATIC
AUTOCODE_AVAILABLE_NO_STATIC, // process is static and autocode type is not NONE

};

#define MOVE_OBSTRUCTION_BOX_SIZE 40

#endif
